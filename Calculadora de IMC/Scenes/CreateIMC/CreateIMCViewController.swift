//
//  CalculaIMCViewController.swift
//  Calculadora de IMC
//
//  Created by user on 03/05/22.
//  Copyright (c) 2022 Angela Yu. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CreateIMCDisplayLogic: AnyObject
{
    func displayWeight(
        viewModel: CreateIMC.FormatWeight.ViewModel
    )
    func displayHeight(
        viewModel: CreateIMC.FormatHeight.ViewModel
    )
}

class CreateIMCViewController: UIViewController
                            , CreateIMCDisplayLogic
{
// MARK: - ATRIBUTES
    var interactor: CreateIMCBusinessLogic?
    var router: (
        NSObjectProtocol
        & CreateIMCRoutingLogic
        & CreateIMCDataPassing
    )?
    
    // MARK: outlets
    @IBOutlet weak var heightSlider: UISlider!
    @IBOutlet weak var heightLabel: UILabel!
    
    @IBOutlet weak var weightSlider: UISlider!
    @IBOutlet weak var weightLabel: UILabel!
    
// MARK: - LIFE CYCLE
    // MARK: object
    override init(
        nibName nibNameOrNil: String?
        , bundle nibBundleOrNil: Bundle?
    ) {
        super.init(
            nibName: nibNameOrNil
            , bundle: nibBundleOrNil
        )
        setup()
    }
    
    required init?(
        coder aDecoder: NSCoder
    ) {
        super.init(
            coder: aDecoder
        )
        setup()
    }
    // MARK: view
    override func viewDidLoad()
    {
        super.viewDidLoad()
        
        configureSliders()
        weightValueChanged(
            weightSlider
        )
        heightValueChanged(
            heightSlider
        )
    }
    
    @IBAction func calculateButtonTapped(
        _ sender: UIButton
    ) {
//        if let orderToEdit = interactor?.orderToEdit {
//             id = orderToEdit.id
//             date = orderToEdit.date
//             total = orderToEdit.total
//             let request = CreateOrder.UpdateOrder.Request(orderFormFields: CreateOrder.OrderFormFields(firstName: firstName, lastName: lastName, phone: phone, email: email, billingAddressStreet1: billingAddressStreet1, billingAddressStreet2: billingAddressStreet2, billingAddressCity: billingAddressCity, billingAddressState: billingAddressState, billingAddressZIP: billingAddressZIP, paymentMethodCreditCardNumber: paymentMethodCreditCardNumber, paymentMethodCVV: paymentMethodCVV, paymentMethodExpirationDate: paymentMethodExpirationDate, paymentMethodExpirationDateString: paymentMethodExpirationDateString, shipmentAddressStreet1: shipmentAddressStreet1, shipmentAddressStreet2: shipmentAddressStreet2, shipmentAddressCity: shipmentAddressCity, shipmentAddressState: shipmentAddressState, shipmentAddressZIP: shipmentAddressZIP, shipmentMethodSpeed: shipmentMethodSpeed, shipmentMethodSpeedString: shipmentMethodSpeedString, id: id, date: date, total: total))
//             interactor?.updateOrder(request: request)
//           } else {
//             let request = CreateOrder.CreateOrder.Request(orderFormFields: CreateOrder.OrderFormFields(firstName: firstName, lastName: lastName, phone: phone, email: email, billingAddressStreet1: billingAddressStreet1, billingAddressStreet2: billingAddressStreet2, billingAddressCity: billingAddressCity, billingAddressState: billingAddressState, billingAddressZIP: billingAddressZIP, paymentMethodCreditCardNumber: paymentMethodCreditCardNumber, paymentMethodCVV: paymentMethodCVV, paymentMethodExpirationDate: paymentMethodExpirationDate, paymentMethodExpirationDateString: paymentMethodExpirationDateString, shipmentAddressStreet1: shipmentAddressStreet1, shipmentAddressStreet2: shipmentAddressStreet2, shipmentAddressCity: shipmentAddressCity, shipmentAddressState: shipmentAddressState, shipmentAddressZIP: shipmentAddressZIP, shipmentMethodSpeed: shipmentMethodSpeed, shipmentMethodSpeedString: shipmentMethodSpeedString, id: id, date: date, total: total))
//             interactor?.createOrder(request: request)
//           }
    }
// MARK: - SLIDERS
    func configureSliders() {
        heightSlider.value = 1.5
        weightSlider.value = 100
    }
    
    @IBAction func heightValueChanged(
        _ sender: UISlider
    ) {
        let height = sender.value
        let request = CreateIMC.FormatHeight.Request(
            height: height
        )
        interactor?.formatHeight(
            request: request
        )
        
//        imc.setHeight( heightSlider.value )
//        heightLabel.text = "\( imc.getHeight() )m"
    }
    @IBAction func weightValueChanged(
        _ sender: UISlider
    ) {
        let weight = sender.value
        let request = CreateIMC.FormatWeight.Request(
            weight: weight
        )
        interactor?.formatWeight(
            request: request
        )
//        imc.setWeight( weightSlider.value )
//        weightLabel.text = "\( imc.getWeight() )kg"
    }
    
    func displayWeight(
        viewModel: CreateIMC.FormatWeight.ViewModel
    ) {
        weightLabel.text = viewModel.weight
    }
    func displayHeight(
        viewModel: CreateIMC.FormatHeight.ViewModel
    ) {
        heightLabel.text = viewModel.height
    }
}

// MARK: - CONFIGURATOR
extension CreateIMCViewController {
    private func setup()
    {
        let viewController = self
        let interactor = CreateIMCInteractor()
        let presenter = CreateIMCPresenter()
        let router = CreateIMCRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
}

// MARK: - ROUTING
extension CreateIMCViewController {
    override func prepare(
        for segue: UIStoryboardSegue
        , sender: Any?
    ) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router
                , router.responds(
                    to: selector
                )
            {
                router.perform(
                    selector
                    , with: segue
                )
            }
        }
    }
}
